#!/usr/bin/env python
import re
import fileinput

class State:
    IN_SEQUENCE = 1
    IN_SHAPE = 2


line_no = 0

current_id = None
current_seq = None
current_shape = None
current_strain = "0.0"
current_type = None


def get_shape(line):
    shape, rest = line.split(" ")
    return shape

def emit_headers():
    print ",".join(["ACCID"] + ["ARC"+str(i)
                                for i in range(1,11)] + ["STRAIN","TYPE"])
    
def emit_features(accession, seq, shape, strain, viroid_type):
    assert len(seq) == len(shape)
    dots = re.findall("\.+", shape)
    dot_sizes = {}

    for i in range(1,11):
        dot_sizes[i] = dots.count("." * i)

    line = ",".join([accession] + [str(dot_sizes[i]) for i in range(1,11)])
    line = line + "," + strain + ","  + viroid_type
    print line

emit_headers()

for line in fileinput.input():
    line = line.strip()
    line_no += 1
    m = line_no % 3
    if m == 1:
        current_seq = None
        current_shape = None
        current_id = None
        # accession number
        assert line.startswith(">"), "Not an accession id"
        current_id = line[1:].split()[0]
        # if we've annotated with snps
        if ";snp" in line:
            parts = line.split(";")
            snp = parts[-1]
            current_type = parts[-2] # e.g. pos or avr or unc
            current_id = current_id + "." + snp
    elif m == 2:
        current_seq = line.strip()
    elif m == 0:
        current_shape = get_shape(line)
        assert len(current_shape) == len(current_seq)

        emit_features(current_id,
                      current_seq,
                      current_shape,
                      current_strain,
                      current_type)
    else:
        raise Exception("???")

